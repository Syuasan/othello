

/**
 * Module dependencies.
 */

var crypto   = require('crypto')
  , fs       = require('fs')
  , mongoose = require('mongoose');

var Schema = mongoose.Schema;
var mapSchema = new Schema({
    player1:String,
    player2:String,
    map:String
});
var Map = mongoose.model('Map', mapSchema);

var Othello = exports = module.exports = function Othello() {
    this.sigsize = 10;
    this.mapsize = 8;
    this.mapdir = './tmp/';
    mongoose.connect('mongodb://127.0.0.1/othello');
};

/**
 * map cells
 * 0 : empty cell
 * 1 : player1's cell
 * 2 : player2's cell
 */

/**
 * Othello prototype.
 */

Othello.prototype = {

    /**
     * Initialize othello map.
     */

    init: function() {
        // create sig
        var sig = crypto.randomBytes(this.sigsize * 2)
            .toString("base64").slice(0, this.sigsize).replace('/', '_');
        var map = new Map();
        map.map = [
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,1,2,0,0,0],
            [0,0,0,2,1,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0]
        ];
        map.player1 = 'hoge';
        map.player2 = 'fuga';

        // store map
        map.save(function(err, doc) {
            if (!err) {
                console.log('successfully saved.');
            } else{
                console.log('failed to save map.');
            }
        });
        //this.store(sig, map);

        return sig;
    },

    /**
     * Update othello map.
     */

    update: function(sig, x, y, p) {
        if (!sig || sig.length !== this.sigsize) {
            console.error('invalid sig size.');
            return false;
        }

        if (!this.onMap(x, y)) {
            console.error('point is not on map. (' + x + ',' + y +')' );
            return false;
        }

        var map = this.load(sig),
        another = (p === 1)? 2 : 1,
        updated = false,
        directions = [
            [ 0,  1], // up
            [ 0, -1], // down
            [ 1,  0], // left
            [-1,  0], // right
            [ 1,  1], // up right
            [-1,  1], // up left
            [ 1, -1], // down right
            [-1, -1], // down left
        ];

        for (var i = -1; d = directions[++i];) {
            var xnext = x + d[0], ynext = y + d[1];
            if (typeof(map[ynext]) === 'undefined' ||
                typeof(map[ynext][xnext]) === 'undefined' ||
                map[ynext][xnext] !== another)
                continue;

            for (var _y = ynext, _x = xnext;
                 this.onMap(_x, _y);
                 _y += d[1], _x += d[0]) {
                if (map[_y][_x] === p) {
                    for (var __y = y, __x = x;
                         __y !== _y || __x !== _x;
                         __y += d[1], __x += d[0]) {
                        map[__y][__x] = p;
                        updated = true;
                    }
                    break;
                }
            }
        }

        return (updated)? map : false;
    },

    /**
     * Count each cell.
     */

    count: function(sig, p) {
        var map = this.load(sig);
        var count = 0;
        for (var y = -1; ++y < this.mapsize;)
            for (var x = -1; ++x < this.mapsize;)
                if (map[y][x] === p)
                    ++count;
        return count;
    },

    /**
     * load othello map.
     */

    load: function(sig) {
        if (!sig || sig.length !== this.sigsize) {
            console.error('invalid sig size.');
            return false;
        }

        return JSON.parse(fs.readFileSync(this.mapdir + sig + '.json'));
    },

    /**
     * Store othello map.
     */

    store: function(sig, map) {
        if (!sig || sig.length !== this.sigsize) {
            console.error('invalid sig size.');
            return false;
        }

        if (!this.validate(map)) {
            console.error('invalid map array.');
            return false;
        }

        // store map
        fs.writeFileSync(this.mapdir + sig + '.json', JSON.stringify(map));

        return true;
    },

    /**
     * Validate othello map.
     */

    validate: function(map) {
        if (!map || map.length !== this.mapsize)
            return false;

        var row;
        for (var y = -1; row = map[++y];) {
            if (row.length !== this.mapsize)
                return false;

            for (var x = -1; ++x < this.mapsize;) {
                if (row[x] !== 0 &&
                    row[x] !== 1 &&
                    row[x] !== 2 )
                    return false;
            }
        }

        return true;
    },

    /**
     * Check wether the point is on map.
     */

    onMap: function(x, y) {
        return (y >= 0 && y < this.mapsize && x >= 0 && x < this.mapsize);
    }
};

